>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test with integer matrix
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test with float matrix
>>> matrix = [[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]]
>>> matrix_divided(matrix, 2)
[[0.75, 1.25, 1.75], [2.25, 2.75, 3.25]]

# Test with mixed integer and float matrix
>>> matrix = [[1, 2.5, 3], [4.5, 5, 6]]
>>> matrix_divided(matrix, 2)
[[0.5, 1.25, 1.5], [2.25, 2.5, 3.0]]

# Test with division by 1 (should return the same matrix)
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 1)
[[1, 2, 3], [4, 5, 6]]

# Test with rows of unequal size
>>> matrix = [[1, 2, 3], [4, 5]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

# Test for type error with non-numeric values in matrix
>>> matrix = [["Holberton", 2], [3, 4]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test for type error with non-matrix input
>>> matrix = "Holberton"
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test for division by zero
>>> matrix = [[1, 2], [3, 4]]
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

# Test for type error with non-numeric divisor
>>> matrix = [[1, 2], [3, 4]]
>>> matrix_divided(matrix, "Holberton")
Traceback (most recent call last):
...
TypeError: div must be a number
