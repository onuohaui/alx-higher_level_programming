#!/usr/bin/python3
"""Defines a class MyList that inherits from list.

>>> MyList = __import__('1-my_list').MyList

# Case 0: Import (implicitly tested by importing MyList)

# Case 1: Common case
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]

# Case 2: Not defined object
# This case is meant to show what happens when an undefined object calls print_sorted.
# It cannot be directly tested with doctest as it expects to catch exceptions in a different format.

# Case 3: Passed a list
# Initialization with a list directly is not supported in the provided implementation.

# Case 4: Empty list
>>> my_list = MyList()
>>> my_list.print_sorted()
[]

# Case 5: Unique number
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.print_sorted()
[1]
>>> print(my_list)
[1]

# Case 6: Same number
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(1)
>>> my_list.append(1)
>>> my_list.append(1)
>>> my_list.print_sorted()
[1, 1, 1, 1]

# Case 7: Parent object
# This demonstrates expected behavior but cannot be directly tested with doctest as it's about type checking and attribute existence.

# Case 8: Negative numbers
>>> my_list = MyList()
>>> my_list.append(5)
>>> my_list.append(1)
>>> my_list.append(-1)
>>> my_list.append(51)
>>> my_list.append(-5)
>>> my_list.print_sorted()
[-5, -1, 1, 5, 51]
"""

class MyList(list):
    """A subclass of list that can print the list in sorted order."""
    
    def print_sorted(self):
        """Prints the list in ascending order."""
        print(sorted(self))

if __name__ == "__main__":
    import doctest
    doctest.testmod()
